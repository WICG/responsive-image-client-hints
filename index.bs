<pre class="metadata">
Title: Responsive Image Client Hints
Status: DREAM
ED: http://github.com/eeeps/responsive-image-client-hints
Shortname: respimg-ch
Level: 1
Editor: Eric Portis, Cloudinary, https://ericportis.com, eric@cloudinary.com
Abstract: This spec introduces several client hints useful for server-negotiated responsive images.
Markup Shorthands: dfn yes
                   markdown yes
</pre>

<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:fetch
</pre>


Introduction {#intro}
=======

Existing solutions for the [responsive image use cases](http://usecases.responsiveimages.org) rely on a suite of markup (<{picture}> and <{img/srcset}>) which allows authors and browsers to decide how `<img>`s on the web should adapt to varying contexts, so that different users receive different resources, tailored to their particular context.

Authors know the most about the page which an `<img>` is appearing; user agents know the most about the end user's current context and preferences. Servers, however, often know the most about the *available resources*, and are well-situated to make good decisions in more-scalable, easier-to-implement-and-maintain ways, via [content negotiation](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#content.negotiation). Servers require a bit of extra information about the page and user, though, in order to do that; that information may be delivered in a secure, privacy-preserving way via these [=client hints=].

By moving this decision-making to the server, we:

- de-couple responsive image decision making from markup. This:
   - makes markup much easier to author and maintain.
   - allows the responsive image decision making to evolve more easily over time.
- move responsive image decision making to the place where resources being served, and often generated. This:
   - allows that decision making to be informed by image content.
   - allows image resources to be generated on the fly to fulfill requests.

<div class="example">
ShoeShoppe.biz wants to send responsive hero images on their product pages. With the responsive image client hints, they author markup like this:

```html
<img
	src="https://media.shoeshoppe.biz/cool-shoe-hero.jpg"
	sizes="(min-width: 800px) 800px, 100vw"
	alt="A cool shoe"
/>
```

...and send the following [=client hints/Accept-CH=] and [=permissions-policy-header=] response headers along with their root HTML document:

```
Accept-CH: CH-DPR, CH-Width
Permissions-Policy: ch-dpr=(self "https://media.shoeshoppe.biz"), ch-width=(self "https://media.shoeshoppe.biz")
```

A user agent, on a 3x device, with a 400-px-wide viewport, then sends the following headers along with the image request:

```
GET https://media.shoeshoppe.biz/cool-shoe-hero.jpg
Sec-CH-Width: 1200
Sec-CH-DPR: 3
```

`media.shoeshoppe.biz` might then respond to this by noting that `cool-shoe-hero.jpg` contains photographic content, and that the apparent-quality benefits of sending a 3x version are not likely to outweigh the cost in increased filesize. So it sends an 800-pixel-wide response instead, and [modifies the response resource's EXIF resolution](https://github.com/whatwg/html/pull/5574) to tell the browser that it is a 2x resource, in order to ensure that resulting `<img>` has the expected density-corrected intrinsic width of 400px.
</div>


Responsive Image Hints  {#responsive-image-hints}
=======


The <code>Sec-CH-Width</code> Header Field {#sec-ch-width}
-------


The <code><dfn http-header export>Sec-CH-Width</dfn></code> request header field gives a server information about the intended <a href="https://html.spec.whatwg.org/multipage/images.html#density-corrected-intrinsic-width-and-height">density-corrected</a> layout width of the image. It is a [=Structured Header=] whose value MUST be an [=structured header/integer=] greater than or equal to 0.

If the value is zero, it indicates that the image will not be displayed.

For [=fetches=] trigged by <{img}> elements, its value SHOULD be calculated by multiplying the <a href="https://html.spec.whatwg.org/multipage/images.html#source-set">source set</a>'s current <a href="https://html.spec.whatwg.org/multipage/images.html#source-size-2">source size</a> by the {{Window}}'s current {{Window/devicePixelRatio}}.

<div class="example">
Given:

<ol><li>this markup:

```html
<img src="a.jpg" sizes="33vw">
```
</li>
<li>a 1000-''<length>/px''-wide viewport, and
</li>
<li>a {{Window/devicePixelRatio}} of 2,
</li>
</ol>

...a user agent calculates the <code><a http-header>Sec-CH-Width</a></code> value to be the <a href="https://html.spec.whatwg.org/multipage/images.html#source-size-2">source size</a> (<code>33vw</code>, which in this context equals <code>330px</code>) * the {{Window/devicePixelRatio}} (<code>2</code>), and attaches the following header to the request for <code>a.jpg</code>:

```
Sec-CH-Width: 660
````
</div>

Note: do we need to talk about fetches initiated by CSS (probably)? Other sorts of fetches?

Note: explain about density-corrected and Vary

Note: does this get sent when there's no `sizes`?


The <code>Sec-CH-Viewport-Width</code> Header Field {#sec-ch-viewport-width}
-------

The <code><dfn http-header export>Sec-CH-Viewport-Width</dfn></code> request header field gives a server information about the user-agent's current <a href="https://www.w3.org/TR/CSS2/visuren.html#viewport">viewport</a> width. It is a [=Structured Header=] whose value MUST be an [=structured header/integer=] greater than or equal to 0.

If the value is zero, it indicates that there is no <a href="https://www.w3.org/TR/CSS2/visuren.html#viewport">viewport</a>.

For [=fetches=] within web contexts, its value SHOULD be the {{Window}}'s current {{Window/innerWidth}}.

Note: window.innerWidth includes scrollbar width. Do we want to use the width of the initial containing block (minus any scrollbar width>; gettable with <code>
document.documentElement.clientWidth</code>), instead?

<div class="example">

Given:

<ol><li>this markup:

```html
<img src="a.jpg">
```
</li>
<li>and a {{Window/innerWidth}} of 1000,
</li>
</ol>

...a user agent attaches the following header to the request for <code>a.jpg</code>:

```
Sec-CH-Viewport-Width: 1000
````

In the absence of any other client hints, the server does the best it can and sends back a 1000-pixel-wide response.

</div>


The <code>Sec-CH-DPR</code> Header Field {#sec-ch-dpr}
-------

The <code><dfn http-header export>Sec-CH-DPR</dfn></code> request header field gives a server information about the user-agent's current device pixel ratio. It is a [=Structured Header=] whose value MUST be an [=structured header/decimal=] greater than 0.

For [=fetches=] within web contexts, its value SHOULD be the {{Window}}'s current {{Window/devicePixelRatio}}.

Servers that send resources in response to requests including [=Sec-CH-DPR=] SHOULD [adjust those resource's intrinsic resolutions via metadata](](https://github.com/whatwg/html/pull/5574)).

<div class="example">

Given:

<ol><li>this markup:

```html
<img src="a.jpg">
```
</li>
<li>and a {{Window/devicePixelRatio}} of 2,
</li>
</ol>

...a user agent attaches the following header to the request for <code>a.jpg</code>:

```
Sec-CH-DPR: 2
````

The default (1x) version of a.jpg is 800x600. The server sees the `Sec-CH-DPR` header and sends a 2x, 1600x1200 response. It tells the user agent to treat the returned resource as 2x by ensuring that it contains the following EXIF metadata, before the image data:

```
XResolution: 144
XResolutionUnit: Inch
PixelXDimensions: 800
PixelYDimensions: 600
```

</div>



Integration with Fetch {#fetch-integration}
-------

Fetch integration of this specification is defined as part of the <a href="https://wicg.github.io/client-hints-infrastructure/#fetch">Client Hints infrastructure</a> specification.






Security and Privacy Considerations {#security-privacy}
=======


Secure Transport {#secure-transport}
----------------

Client Hints will not be delivered to non-secure endpoints (see the secure transport requirements in Section 2.2.1 of [[I-D.ietf-httpbis-client-hints]]). This means that information about the user's device pixel ratio and viewport size will not be leaked over plaintext channels, reducing the opportunity for network attackers to build a profile of a given agent's behavior over time.


Delegation {#delegation}
----------

Client Hints will be delegated from top-level pages via Permissions Policy. This reduces the potential for <a href="https://www.w3.org/TR/fingerprinting-guidance/#passive-0">passive fingerprinting</a> by:

1. Sending fewer hints to third parties.
1. Never doing so indiscriminately. Information can only be revealed to third parties after the root page author explicitly asks it to be revealed to them. 
2. Ensuring that everyone (users, user agents, privacy advocates...) can see who is getting what information.

That delegation is defined as part of <a href="https://wicg.github.io/client-hints-infrastructure/#abstract-opdef-append-client-hints-to-request">append client hints to request</a>.


Access and Accuracy Restrictions {#access-and-accuracy}
-------------------

The information in the Client Hints defined above reveals extra information about the user's context. User agents ought to exercise judgement before granting access to this information, and MAY impose restrictions above and beyond the secure transport and delegation requirements noted above. For instance, screen readers may choose not to indicate that they have no viewport, to ensure that their users are not <a href="https://tink.uk/thoughts-on-screen-reader-detection/">served separate content</a>. Similarly, user agents might offer users control over when hints are revealed to servers, gating them based on privacy modes or settings.

User agents may also choose to reduce the accuracy of these values, by rounding to reduce variation between users, and/or adding jitter to increase variation for a single user.

Servers MUST NOT require any of these hints in order to deliver content, and MUST NOT depend on pixel-accurate values in order to deliver acceptable experiences.


Interface and Processing model {#processing}
======

Issue: TODO!? Or do the "in web contexts" notes above, cover this? Do we need an IDL interface? Related - do I need ABNFs, or are the simple structured header types enough?

Implementation Considerations  {#impl-considerations}
=======

The Sec-CH prefix {#sec-ch-prefix}
-------

Issue: TODO (start with https://github.com/WICG/ua-client-hints/blob/master/index.bs#L282 or https://github.com/WICG/ua-client-hints/blob/master/index.bs#L554)





IANA Considerations {#iana-considerations}
=======


This document intends to define the `Sec-CH-Width`, `Sec-CH-Viewport-Width`, and `Sec-CH-DPR` HTTP request header fields, and register them in the permanent message header field registry ([[RFC3864]]).

'Sec-CH-Width' Header Field {#iana-width}
--------------------------

Header field name:
: Sec-CH-Width

Applicable protocol:
: http

Status:
: standard

Author/Change controller:
: IETF

Specification document:
: this specification ([[#sec-ch-width]])

'Sec-CH-Viewport-Width' Header Field {#iana-viewport-width}
--------------------------

Header field name:
: Sec-CH-Viewport-Width

Applicable protocol:
: http

Status:
: standard

Author/Change controller:
: IETF

Specification document:
: this specification ([[#sec-ch-viewport-width]])

'Sec-CH-DPR' Header Field {#iana-dpr}
--------------------------

Header field name:
: Sec-CH-DPR

Applicable protocol:
: http

Status:
: standard

Author/Change controller:
: IETF

Specification document:
: this specification ([[#sec-ch-dpr]])

<pre class="anchors">
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-header-structure; spec: I-D.ietf-httpbis-header-structure
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: token; url: #section-3.3.6
            text: boolean; url: #section-3.3.4
            text: string; url: #section-3.3.3
            text: integer; url: #section-3.3.1
            text: list; url: #section-3.1
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-client-hints; spec: I-D.ietf-httpbis-client-hints
    type: dfn
        text: client hints; url: #
    for: client hints
        type: http-header
            text: Accept-CH; url: #section-3.1
</pre>
<pre class="biblio">
{
  "I-D.ietf-httpbis-header-structure": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure",
    "title": "Structured Headers for HTTP",
    "status": "ID",
    "publisher": "IETF"
  },
  "I-D.ietf-httpbis-client-hints": {
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-client-hints",
    "title": "HTTP Client Hints",
    "authors": [ "Ilya Grigorik" ],
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>
